// Generated by gencpp from file dialogflow_ros/DialogflowServiceResponse.msg
// DO NOT EDIT!


#ifndef DIALOGFLOW_ROS_MESSAGE_DIALOGFLOWSERVICERESPONSE_H
#define DIALOGFLOW_ROS_MESSAGE_DIALOGFLOWSERVICERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dialogflow_ros/DialogflowResult.h>

namespace dialogflow_ros
{
template <class ContainerAllocator>
struct DialogflowServiceResponse_
{
  typedef DialogflowServiceResponse_<ContainerAllocator> Type;

  DialogflowServiceResponse_()
    : success(false)
    , result()  {
    }
  DialogflowServiceResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , result(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef  ::dialogflow_ros::DialogflowResult_<ContainerAllocator>  _result_type;
  _result_type result;





  typedef boost::shared_ptr< ::dialogflow_ros::DialogflowServiceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dialogflow_ros::DialogflowServiceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct DialogflowServiceResponse_

typedef ::dialogflow_ros::DialogflowServiceResponse_<std::allocator<void> > DialogflowServiceResponse;

typedef boost::shared_ptr< ::dialogflow_ros::DialogflowServiceResponse > DialogflowServiceResponsePtr;
typedef boost::shared_ptr< ::dialogflow_ros::DialogflowServiceResponse const> DialogflowServiceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dialogflow_ros::DialogflowServiceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dialogflow_ros::DialogflowServiceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dialogflow_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'dialogflow_ros': ['/home/esteban/catkin_ws/src/dialogflow_ros/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dialogflow_ros::DialogflowServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dialogflow_ros::DialogflowServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dialogflow_ros::DialogflowServiceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dialogflow_ros::DialogflowServiceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dialogflow_ros::DialogflowServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dialogflow_ros::DialogflowServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dialogflow_ros::DialogflowServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5d8fbf4d7bbaffc7725d2534e9fd2d1a";
  }

  static const char* value(const ::dialogflow_ros::DialogflowServiceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5d8fbf4d7bbaffc7ULL;
  static const uint64_t static_value2 = 0x725d2534e9fd2d1aULL;
};

template<class ContainerAllocator>
struct DataType< ::dialogflow_ros::DialogflowServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dialogflow_ros/DialogflowServiceResponse";
  }

  static const char* value(const ::dialogflow_ros::DialogflowServiceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dialogflow_ros::DialogflowServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n\
DialogflowResult result\n\
\n\
================================================================================\n\
MSG: dialogflow_ros/DialogflowResult\n\
string action\n\
string query_text\n\
string fulfillment_text\n\
DialogflowParameter[] parameters\n\
DialogflowContext[] contexts\n\
string intent\n\
================================================================================\n\
MSG: dialogflow_ros/DialogflowParameter\n\
string name\n\
string value\n\
================================================================================\n\
MSG: dialogflow_ros/DialogflowContext\n\
string name\n\
int32 lifespan_count\n\
DialogflowParameter[] parameters\n\
";
  }

  static const char* value(const ::dialogflow_ros::DialogflowServiceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dialogflow_ros::DialogflowServiceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DialogflowServiceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dialogflow_ros::DialogflowServiceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dialogflow_ros::DialogflowServiceResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "result: ";
    s << std::endl;
    Printer< ::dialogflow_ros::DialogflowResult_<ContainerAllocator> >::stream(s, indent + "  ", v.result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIALOGFLOW_ROS_MESSAGE_DIALOGFLOWSERVICERESPONSE_H
